/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

/* parse */

/* serialize */

/* webpack/runtime/global */

/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

/*#__PURE__*/

/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Module exports.
 * @public
 */

/**
 * Module variables.
 * @private
 */

/**
 * Parse a cookie header.
 *
 * Parse the given cookie header string into an object
 * The object has the various cookies as keys(names) => values
 *
 * @param {string} str
 * @param {object} [options]
 * @return {object}
 * @public
 */

/**
 * Serialize data into a cookie header.
 *
 * Serialize the a name value pair into a cookie string suitable for
 * http headers. An optional options object specified cookie parameters.
 *
 * serialize('foo', 'bar', { httpOnly: true })
 *   => "foo=bar; httpOnly"
 *
 * @param {string} name
 * @param {string} val
 * @param {object} [options]
 * @return {string}
 * @public
 */

/**
 * Try decoding a string using a decoding function.
 *
 * @param {string} str
 * @param {function} decode
 * @private
 */

/** @class */

/************************************************************************/

/******/

/***/

// At least we tried

// CONCATENATED MODULE: ./node_modules/universal-cookie/es6/Cookies.js

// CONCATENATED MODULE: ./node_modules/universal-cookie/es6/utils.js

// CONCATENATED MODULE: ./src/js/pages/home/files-app/App.js

// Can we get/set cookies on document.cookie?

// Check if module is in cache

// Create a new module (and put it into the cache)

// DCE check should happen before ReactDOM bundle executes so that

// DevTools can report bad minification during injection.

// DevTools shouldn't crash React, no matter what.

// EXTERNAL MODULE: ./node_modules/react-dom/client.js

// EXTERNAL MODULE: ./node_modules/react/index.js

// Execute the module function

// Ignore clean value if we failed the deserialization

// It is not relevant anymore to trim those values

// Return the exports of the module

// The module cache

// The require function

// Verify that the code above has been dead code eliminated (DCE'd).

// We guess if the cookie start with { or [, it has been serialized

// We should still report in case we break this code.

// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration

// express prepend j: before serializing a cookie

// no module.id needed

// no module.loaded needed

// only assign once

// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.

// quoted values

// skip things that don't look like key=value

// webpackBootstrap
